Atividade 1

TESTE 1: Valor de 'soma' = 140589
TESTE 2: Valor de 'soma' = 100000
TESTE 3: Valor de 'soma' = 100000
TESTE 4: Valor de 'soma' = 102640
TESTE 5: Valor de 'soma' = 112845
TESTE 6: Valor de 'soma' = 110469
TESTE 7: Valor de 'soma' = 100000
TESTE 8: Valor de 'soma' = 112241
TESTE 9: Valor de 'soma' = 100650
TESTE 10 Valor de 'soma' = 100650

1.3 Os valores não foram sempre dentro do valor esperado, que seria 200000, 
porque acessam a memória compartilhada, então houve perda de incremento , ou até
uma thread salvar um valor e outra modifica o valor e a thread quando voltar
usa o soma antigo

1.4 É possível sim, elas podem ter executado e não ter acessado simultaneamente

Atividade 2
2.2 O valor sempre foram dentro do esperado, por causa da exclusão
mútua que bloqueia a seção críica enquanto uma thread esta usando e só
devolve quando ela terminar e então outra thread vai acessar

Atividade 3
TESTE COM N=1000 e 1 thread
0.00055

TESTE COM N=1000 e 2 threads
0.000541

TESTE COM N=1000 e 4 threads 
0.000653

TESTE COM N=1000000 e 1 thread
Tempo verificando primo:0.099964

TESTE COM N=1000000 e 2 thread
Tempo verificando primo:0.060700

TESTE COM N=1000000 e 4 thread
Tempo verificando primo:0.041054


Teste com N = 1000
1 thread:
Speedup: ≈ 1
Eficiência:  ≈ 1
2 threads:
Speedup:  ≈1.0166
Eficiência:  ≈0.5083
4 threads:
Speedup:  ≈0.842
Eficiência:  ≈0.2105
Teste com N = 1000000
1 thread:
Speedup: ≈  0.099964
Eficiência:  ≈ 1
2 threads:
Speedup:  ≈1.6477
Eficiência:  ≈0.8239
4 threads:
Speedup:  ≈2.4364
Eficiência:  ≈0.6091
Esses cálculos mostram como o desempenho aumenta com o número de threads, mas também destacam a eficiência relativa de cada configuração, que pode ser afetada pelo overhead de gerenciamento de threads e pela natureza do problema paralelizável.
